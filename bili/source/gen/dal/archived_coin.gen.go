// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/alice52/archive/bili/source/gen/model"
)

func newArchivedCoin(db *gorm.DB, opts ...gen.DOOption) archivedCoin {
	_archivedCoin := archivedCoin{}

	_archivedCoin.archivedCoinDo.UseDB(db, opts...)
	_archivedCoin.archivedCoinDo.UseModel(&model.ArchivedCoin{})

	tableName := _archivedCoin.archivedCoinDo.TableName()
	_archivedCoin.ALL = field.NewAsterisk(tableName)
	_archivedCoin.Bvid = field.NewString(tableName, "bvid")
	_archivedCoin.CreateTime = field.NewTime(tableName, "create_time")
	_archivedCoin.UpdateTime = field.NewTime(tableName, "update_time")
	_archivedCoin.DeleteTime = field.NewField(tableName, "delete_time")
	_archivedCoin.Aid = field.NewInt64(tableName, "aid")
	_archivedCoin.Cid = field.NewInt64(tableName, "cid")
	_archivedCoin.Cover = field.NewString(tableName, "cover")
	_archivedCoin.Duration = field.NewInt64(tableName, "duration")
	_archivedCoin.CoinedTime = field.NewInt64(tableName, "coined_time")
	_archivedCoin.SeasonID = field.NewInt64(tableName, "season_id")
	_archivedCoin.Intro = field.NewString(tableName, "intro")
	_archivedCoin.Title = field.NewString(tableName, "title")
	_archivedCoin.Type = field.NewInt64(tableName, "type")
	_archivedCoin.Coins = field.NewInt64(tableName, "coins")
	_archivedCoin.Owner = field.NewString(tableName, "owner")
	_archivedCoin.Resp = field.NewString(tableName, "resp")
	_archivedCoin.CntInfo = field.NewString(tableName, "cnt_info")
	_archivedCoin.ArchivedVideo = archivedCoinHasOneArchivedVideo{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ArchivedVideo", "model.ArchivedVideo"),
	}

	_archivedCoin.fillFieldMap()

	return _archivedCoin
}

// archivedCoin 投币视频
type archivedCoin struct {
	archivedCoinDo

	ALL           field.Asterisk
	Bvid          field.String
	CreateTime    field.Time
	UpdateTime    field.Time
	DeleteTime    field.Field
	Aid           field.Int64  // bili aid
	Cid           field.Int64  // bili cid
	Cover         field.String // video cover
	Duration      field.Int64  // video duration
	CoinedTime    field.Int64  // video coin time
	SeasonID      field.Int64  // bili season id
	Intro         field.String // video intro
	Title         field.String // video title
	Type          field.Int64  // video type
	Coins         field.Int64  // video coins
	Owner         field.String // {"mid": 173986740, "name": "这个月-"}
	Resp          field.String
	CntInfo       field.String // {"collect": 73600, "play": 1068474, "danmaku": 2632, "vt": 0, "play_switch": 0, "reply": 0, "view_text_1": "106.8万" }
	ArchivedVideo archivedCoinHasOneArchivedVideo

	fieldMap map[string]field.Expr
}

func (a archivedCoin) Table(newTableName string) *archivedCoin {
	a.archivedCoinDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a archivedCoin) As(alias string) *archivedCoin {
	a.archivedCoinDo.DO = *(a.archivedCoinDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *archivedCoin) updateTableName(table string) *archivedCoin {
	a.ALL = field.NewAsterisk(table)
	a.Bvid = field.NewString(table, "bvid")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.DeleteTime = field.NewField(table, "delete_time")
	a.Aid = field.NewInt64(table, "aid")
	a.Cid = field.NewInt64(table, "cid")
	a.Cover = field.NewString(table, "cover")
	a.Duration = field.NewInt64(table, "duration")
	a.CoinedTime = field.NewInt64(table, "coined_time")
	a.SeasonID = field.NewInt64(table, "season_id")
	a.Intro = field.NewString(table, "intro")
	a.Title = field.NewString(table, "title")
	a.Type = field.NewInt64(table, "type")
	a.Coins = field.NewInt64(table, "coins")
	a.Owner = field.NewString(table, "owner")
	a.Resp = field.NewString(table, "resp")
	a.CntInfo = field.NewString(table, "cnt_info")

	a.fillFieldMap()

	return a
}

func (a *archivedCoin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *archivedCoin) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 18)
	a.fieldMap["bvid"] = a.Bvid
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["delete_time"] = a.DeleteTime
	a.fieldMap["aid"] = a.Aid
	a.fieldMap["cid"] = a.Cid
	a.fieldMap["cover"] = a.Cover
	a.fieldMap["duration"] = a.Duration
	a.fieldMap["coined_time"] = a.CoinedTime
	a.fieldMap["season_id"] = a.SeasonID
	a.fieldMap["intro"] = a.Intro
	a.fieldMap["title"] = a.Title
	a.fieldMap["type"] = a.Type
	a.fieldMap["coins"] = a.Coins
	a.fieldMap["owner"] = a.Owner
	a.fieldMap["resp"] = a.Resp
	a.fieldMap["cnt_info"] = a.CntInfo

}

func (a archivedCoin) clone(db *gorm.DB) archivedCoin {
	a.archivedCoinDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a archivedCoin) replaceDB(db *gorm.DB) archivedCoin {
	a.archivedCoinDo.ReplaceDB(db)
	return a
}

type archivedCoinHasOneArchivedVideo struct {
	db *gorm.DB

	field.RelationField
}

func (a archivedCoinHasOneArchivedVideo) Where(conds ...field.Expr) *archivedCoinHasOneArchivedVideo {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a archivedCoinHasOneArchivedVideo) WithContext(ctx context.Context) *archivedCoinHasOneArchivedVideo {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a archivedCoinHasOneArchivedVideo) Session(session *gorm.Session) *archivedCoinHasOneArchivedVideo {
	a.db = a.db.Session(session)
	return &a
}

func (a archivedCoinHasOneArchivedVideo) Model(m *model.ArchivedCoin) *archivedCoinHasOneArchivedVideoTx {
	return &archivedCoinHasOneArchivedVideoTx{a.db.Model(m).Association(a.Name())}
}

type archivedCoinHasOneArchivedVideoTx struct{ tx *gorm.Association }

func (a archivedCoinHasOneArchivedVideoTx) Find() (result *model.ArchivedVideo, err error) {
	return result, a.tx.Find(&result)
}

func (a archivedCoinHasOneArchivedVideoTx) Append(values ...*model.ArchivedVideo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a archivedCoinHasOneArchivedVideoTx) Replace(values ...*model.ArchivedVideo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a archivedCoinHasOneArchivedVideoTx) Delete(values ...*model.ArchivedVideo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a archivedCoinHasOneArchivedVideoTx) Clear() error {
	return a.tx.Clear()
}

func (a archivedCoinHasOneArchivedVideoTx) Count() int64 {
	return a.tx.Count()
}

type archivedCoinDo struct{ gen.DO }

type IArchivedCoinDo interface {
	gen.SubQuery
	Debug() IArchivedCoinDo
	WithContext(ctx context.Context) IArchivedCoinDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArchivedCoinDo
	WriteDB() IArchivedCoinDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArchivedCoinDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArchivedCoinDo
	Not(conds ...gen.Condition) IArchivedCoinDo
	Or(conds ...gen.Condition) IArchivedCoinDo
	Select(conds ...field.Expr) IArchivedCoinDo
	Where(conds ...gen.Condition) IArchivedCoinDo
	Order(conds ...field.Expr) IArchivedCoinDo
	Distinct(cols ...field.Expr) IArchivedCoinDo
	Omit(cols ...field.Expr) IArchivedCoinDo
	Join(table schema.Tabler, on ...field.Expr) IArchivedCoinDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArchivedCoinDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArchivedCoinDo
	Group(cols ...field.Expr) IArchivedCoinDo
	Having(conds ...gen.Condition) IArchivedCoinDo
	Limit(limit int) IArchivedCoinDo
	Offset(offset int) IArchivedCoinDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArchivedCoinDo
	Unscoped() IArchivedCoinDo
	Create(values ...*model.ArchivedCoin) error
	CreateInBatches(values []*model.ArchivedCoin, batchSize int) error
	Save(values ...*model.ArchivedCoin) error
	First() (*model.ArchivedCoin, error)
	Take() (*model.ArchivedCoin, error)
	Last() (*model.ArchivedCoin, error)
	Find() ([]*model.ArchivedCoin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArchivedCoin, err error)
	FindInBatches(result *[]*model.ArchivedCoin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ArchivedCoin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArchivedCoinDo
	Assign(attrs ...field.AssignExpr) IArchivedCoinDo
	Joins(fields ...field.RelationField) IArchivedCoinDo
	Preload(fields ...field.RelationField) IArchivedCoinDo
	FirstOrInit() (*model.ArchivedCoin, error)
	FirstOrCreate() (*model.ArchivedCoin, error)
	FindByPage(offset int, limit int) (result []*model.ArchivedCoin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArchivedCoinDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a archivedCoinDo) Debug() IArchivedCoinDo {
	return a.withDO(a.DO.Debug())
}

func (a archivedCoinDo) WithContext(ctx context.Context) IArchivedCoinDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a archivedCoinDo) ReadDB() IArchivedCoinDo {
	return a.Clauses(dbresolver.Read)
}

func (a archivedCoinDo) WriteDB() IArchivedCoinDo {
	return a.Clauses(dbresolver.Write)
}

func (a archivedCoinDo) Session(config *gorm.Session) IArchivedCoinDo {
	return a.withDO(a.DO.Session(config))
}

func (a archivedCoinDo) Clauses(conds ...clause.Expression) IArchivedCoinDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a archivedCoinDo) Returning(value interface{}, columns ...string) IArchivedCoinDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a archivedCoinDo) Not(conds ...gen.Condition) IArchivedCoinDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a archivedCoinDo) Or(conds ...gen.Condition) IArchivedCoinDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a archivedCoinDo) Select(conds ...field.Expr) IArchivedCoinDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a archivedCoinDo) Where(conds ...gen.Condition) IArchivedCoinDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a archivedCoinDo) Order(conds ...field.Expr) IArchivedCoinDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a archivedCoinDo) Distinct(cols ...field.Expr) IArchivedCoinDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a archivedCoinDo) Omit(cols ...field.Expr) IArchivedCoinDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a archivedCoinDo) Join(table schema.Tabler, on ...field.Expr) IArchivedCoinDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a archivedCoinDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArchivedCoinDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a archivedCoinDo) RightJoin(table schema.Tabler, on ...field.Expr) IArchivedCoinDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a archivedCoinDo) Group(cols ...field.Expr) IArchivedCoinDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a archivedCoinDo) Having(conds ...gen.Condition) IArchivedCoinDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a archivedCoinDo) Limit(limit int) IArchivedCoinDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a archivedCoinDo) Offset(offset int) IArchivedCoinDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a archivedCoinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArchivedCoinDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a archivedCoinDo) Unscoped() IArchivedCoinDo {
	return a.withDO(a.DO.Unscoped())
}

func (a archivedCoinDo) Create(values ...*model.ArchivedCoin) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a archivedCoinDo) CreateInBatches(values []*model.ArchivedCoin, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a archivedCoinDo) Save(values ...*model.ArchivedCoin) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a archivedCoinDo) First() (*model.ArchivedCoin, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedCoin), nil
	}
}

func (a archivedCoinDo) Take() (*model.ArchivedCoin, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedCoin), nil
	}
}

func (a archivedCoinDo) Last() (*model.ArchivedCoin, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedCoin), nil
	}
}

func (a archivedCoinDo) Find() ([]*model.ArchivedCoin, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArchivedCoin), err
}

func (a archivedCoinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArchivedCoin, err error) {
	buf := make([]*model.ArchivedCoin, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a archivedCoinDo) FindInBatches(result *[]*model.ArchivedCoin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a archivedCoinDo) Attrs(attrs ...field.AssignExpr) IArchivedCoinDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a archivedCoinDo) Assign(attrs ...field.AssignExpr) IArchivedCoinDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a archivedCoinDo) Joins(fields ...field.RelationField) IArchivedCoinDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a archivedCoinDo) Preload(fields ...field.RelationField) IArchivedCoinDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a archivedCoinDo) FirstOrInit() (*model.ArchivedCoin, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedCoin), nil
	}
}

func (a archivedCoinDo) FirstOrCreate() (*model.ArchivedCoin, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedCoin), nil
	}
}

func (a archivedCoinDo) FindByPage(offset int, limit int) (result []*model.ArchivedCoin, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a archivedCoinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a archivedCoinDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a archivedCoinDo) Delete(models ...*model.ArchivedCoin) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *archivedCoinDo) withDO(do gen.Dao) *archivedCoinDo {
	a.DO = *do.(*gen.DO)
	return a
}
