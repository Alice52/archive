// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	ArchivedCoin        *archivedCoin
	ArchivedFav         *archivedFav
	ArchivedFavFolder   *archivedFavFolder
	ArchivedLike        *archivedLike
	ArchivedUp          *archivedUp
	ArchivedUpsTag      *archivedUpsTag
	ArchivedVideo       *archivedVideo
	ArchivedViewHistory *archivedViewHistory
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	ArchivedCoin = &Q.ArchivedCoin
	ArchivedFav = &Q.ArchivedFav
	ArchivedFavFolder = &Q.ArchivedFavFolder
	ArchivedLike = &Q.ArchivedLike
	ArchivedUp = &Q.ArchivedUp
	ArchivedUpsTag = &Q.ArchivedUpsTag
	ArchivedVideo = &Q.ArchivedVideo
	ArchivedViewHistory = &Q.ArchivedViewHistory
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		ArchivedCoin:        newArchivedCoin(db, opts...),
		ArchivedFav:         newArchivedFav(db, opts...),
		ArchivedFavFolder:   newArchivedFavFolder(db, opts...),
		ArchivedLike:        newArchivedLike(db, opts...),
		ArchivedUp:          newArchivedUp(db, opts...),
		ArchivedUpsTag:      newArchivedUpsTag(db, opts...),
		ArchivedVideo:       newArchivedVideo(db, opts...),
		ArchivedViewHistory: newArchivedViewHistory(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ArchivedCoin        archivedCoin
	ArchivedFav         archivedFav
	ArchivedFavFolder   archivedFavFolder
	ArchivedLike        archivedLike
	ArchivedUp          archivedUp
	ArchivedUpsTag      archivedUpsTag
	ArchivedVideo       archivedVideo
	ArchivedViewHistory archivedViewHistory
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		ArchivedCoin:        q.ArchivedCoin.clone(db),
		ArchivedFav:         q.ArchivedFav.clone(db),
		ArchivedFavFolder:   q.ArchivedFavFolder.clone(db),
		ArchivedLike:        q.ArchivedLike.clone(db),
		ArchivedUp:          q.ArchivedUp.clone(db),
		ArchivedUpsTag:      q.ArchivedUpsTag.clone(db),
		ArchivedVideo:       q.ArchivedVideo.clone(db),
		ArchivedViewHistory: q.ArchivedViewHistory.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		ArchivedCoin:        q.ArchivedCoin.replaceDB(db),
		ArchivedFav:         q.ArchivedFav.replaceDB(db),
		ArchivedFavFolder:   q.ArchivedFavFolder.replaceDB(db),
		ArchivedLike:        q.ArchivedLike.replaceDB(db),
		ArchivedUp:          q.ArchivedUp.replaceDB(db),
		ArchivedUpsTag:      q.ArchivedUpsTag.replaceDB(db),
		ArchivedVideo:       q.ArchivedVideo.replaceDB(db),
		ArchivedViewHistory: q.ArchivedViewHistory.replaceDB(db),
	}
}

type queryCtx struct {
	ArchivedCoin        IArchivedCoinDo
	ArchivedFav         IArchivedFavDo
	ArchivedFavFolder   IArchivedFavFolderDo
	ArchivedLike        IArchivedLikeDo
	ArchivedUp          IArchivedUpDo
	ArchivedUpsTag      IArchivedUpsTagDo
	ArchivedVideo       IArchivedVideoDo
	ArchivedViewHistory IArchivedViewHistoryDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ArchivedCoin:        q.ArchivedCoin.WithContext(ctx),
		ArchivedFav:         q.ArchivedFav.WithContext(ctx),
		ArchivedFavFolder:   q.ArchivedFavFolder.WithContext(ctx),
		ArchivedLike:        q.ArchivedLike.WithContext(ctx),
		ArchivedUp:          q.ArchivedUp.WithContext(ctx),
		ArchivedUpsTag:      q.ArchivedUpsTag.WithContext(ctx),
		ArchivedVideo:       q.ArchivedVideo.WithContext(ctx),
		ArchivedViewHistory: q.ArchivedViewHistory.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
