// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/alice52/archive/bili/source/gen/model"
)

func newArchivedFavFolder(db *gorm.DB, opts ...gen.DOOption) archivedFavFolder {
	_archivedFavFolder := archivedFavFolder{}

	_archivedFavFolder.archivedFavFolderDo.UseDB(db, opts...)
	_archivedFavFolder.archivedFavFolderDo.UseModel(&model.ArchivedFavFolder{})

	tableName := _archivedFavFolder.archivedFavFolderDo.TableName()
	_archivedFavFolder.ALL = field.NewAsterisk(tableName)
	_archivedFavFolder.ID = field.NewInt64(tableName, "id")
	_archivedFavFolder.Fid = field.NewInt64(tableName, "fid")
	_archivedFavFolder.CreateTime = field.NewTime(tableName, "create_time")
	_archivedFavFolder.UpdateTime = field.NewTime(tableName, "update_time")
	_archivedFavFolder.DeleteTime = field.NewField(tableName, "delete_time")
	_archivedFavFolder.Mid = field.NewInt64(tableName, "mid")
	_archivedFavFolder.MediaCount = field.NewInt64(tableName, "media_count")
	_archivedFavFolder.Title = field.NewString(tableName, "title")
	_archivedFavFolder.Resp = field.NewString(tableName, "resp")

	_archivedFavFolder.fillFieldMap()

	return _archivedFavFolder
}

// archivedFavFolder 收藏文件夹
type archivedFavFolder struct {
	archivedFavFolderDo

	ALL        field.Asterisk
	ID         field.Int64
	Fid        field.Int64 // bili folder id
	CreateTime field.Time
	UpdateTime field.Time
	DeleteTime field.Field
	Mid        field.Int64  // bili uid
	MediaCount field.Int64  // media count
	Title      field.String // title
	Resp       field.String

	fieldMap map[string]field.Expr
}

func (a archivedFavFolder) Table(newTableName string) *archivedFavFolder {
	a.archivedFavFolderDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a archivedFavFolder) As(alias string) *archivedFavFolder {
	a.archivedFavFolderDo.DO = *(a.archivedFavFolderDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *archivedFavFolder) updateTableName(table string) *archivedFavFolder {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Fid = field.NewInt64(table, "fid")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.DeleteTime = field.NewField(table, "delete_time")
	a.Mid = field.NewInt64(table, "mid")
	a.MediaCount = field.NewInt64(table, "media_count")
	a.Title = field.NewString(table, "title")
	a.Resp = field.NewString(table, "resp")

	a.fillFieldMap()

	return a
}

func (a *archivedFavFolder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *archivedFavFolder) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["fid"] = a.Fid
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["delete_time"] = a.DeleteTime
	a.fieldMap["mid"] = a.Mid
	a.fieldMap["media_count"] = a.MediaCount
	a.fieldMap["title"] = a.Title
	a.fieldMap["resp"] = a.Resp
}

func (a archivedFavFolder) clone(db *gorm.DB) archivedFavFolder {
	a.archivedFavFolderDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a archivedFavFolder) replaceDB(db *gorm.DB) archivedFavFolder {
	a.archivedFavFolderDo.ReplaceDB(db)
	return a
}

type archivedFavFolderDo struct{ gen.DO }

type IArchivedFavFolderDo interface {
	gen.SubQuery
	Debug() IArchivedFavFolderDo
	WithContext(ctx context.Context) IArchivedFavFolderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArchivedFavFolderDo
	WriteDB() IArchivedFavFolderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArchivedFavFolderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArchivedFavFolderDo
	Not(conds ...gen.Condition) IArchivedFavFolderDo
	Or(conds ...gen.Condition) IArchivedFavFolderDo
	Select(conds ...field.Expr) IArchivedFavFolderDo
	Where(conds ...gen.Condition) IArchivedFavFolderDo
	Order(conds ...field.Expr) IArchivedFavFolderDo
	Distinct(cols ...field.Expr) IArchivedFavFolderDo
	Omit(cols ...field.Expr) IArchivedFavFolderDo
	Join(table schema.Tabler, on ...field.Expr) IArchivedFavFolderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArchivedFavFolderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArchivedFavFolderDo
	Group(cols ...field.Expr) IArchivedFavFolderDo
	Having(conds ...gen.Condition) IArchivedFavFolderDo
	Limit(limit int) IArchivedFavFolderDo
	Offset(offset int) IArchivedFavFolderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArchivedFavFolderDo
	Unscoped() IArchivedFavFolderDo
	Create(values ...*model.ArchivedFavFolder) error
	CreateInBatches(values []*model.ArchivedFavFolder, batchSize int) error
	Save(values ...*model.ArchivedFavFolder) error
	First() (*model.ArchivedFavFolder, error)
	Take() (*model.ArchivedFavFolder, error)
	Last() (*model.ArchivedFavFolder, error)
	Find() ([]*model.ArchivedFavFolder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArchivedFavFolder, err error)
	FindInBatches(result *[]*model.ArchivedFavFolder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ArchivedFavFolder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArchivedFavFolderDo
	Assign(attrs ...field.AssignExpr) IArchivedFavFolderDo
	Joins(fields ...field.RelationField) IArchivedFavFolderDo
	Preload(fields ...field.RelationField) IArchivedFavFolderDo
	FirstOrInit() (*model.ArchivedFavFolder, error)
	FirstOrCreate() (*model.ArchivedFavFolder, error)
	FindByPage(offset int, limit int) (result []*model.ArchivedFavFolder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArchivedFavFolderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a archivedFavFolderDo) Debug() IArchivedFavFolderDo {
	return a.withDO(a.DO.Debug())
}

func (a archivedFavFolderDo) WithContext(ctx context.Context) IArchivedFavFolderDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a archivedFavFolderDo) ReadDB() IArchivedFavFolderDo {
	return a.Clauses(dbresolver.Read)
}

func (a archivedFavFolderDo) WriteDB() IArchivedFavFolderDo {
	return a.Clauses(dbresolver.Write)
}

func (a archivedFavFolderDo) Session(config *gorm.Session) IArchivedFavFolderDo {
	return a.withDO(a.DO.Session(config))
}

func (a archivedFavFolderDo) Clauses(conds ...clause.Expression) IArchivedFavFolderDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a archivedFavFolderDo) Returning(value interface{}, columns ...string) IArchivedFavFolderDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a archivedFavFolderDo) Not(conds ...gen.Condition) IArchivedFavFolderDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a archivedFavFolderDo) Or(conds ...gen.Condition) IArchivedFavFolderDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a archivedFavFolderDo) Select(conds ...field.Expr) IArchivedFavFolderDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a archivedFavFolderDo) Where(conds ...gen.Condition) IArchivedFavFolderDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a archivedFavFolderDo) Order(conds ...field.Expr) IArchivedFavFolderDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a archivedFavFolderDo) Distinct(cols ...field.Expr) IArchivedFavFolderDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a archivedFavFolderDo) Omit(cols ...field.Expr) IArchivedFavFolderDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a archivedFavFolderDo) Join(table schema.Tabler, on ...field.Expr) IArchivedFavFolderDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a archivedFavFolderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArchivedFavFolderDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a archivedFavFolderDo) RightJoin(table schema.Tabler, on ...field.Expr) IArchivedFavFolderDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a archivedFavFolderDo) Group(cols ...field.Expr) IArchivedFavFolderDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a archivedFavFolderDo) Having(conds ...gen.Condition) IArchivedFavFolderDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a archivedFavFolderDo) Limit(limit int) IArchivedFavFolderDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a archivedFavFolderDo) Offset(offset int) IArchivedFavFolderDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a archivedFavFolderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArchivedFavFolderDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a archivedFavFolderDo) Unscoped() IArchivedFavFolderDo {
	return a.withDO(a.DO.Unscoped())
}

func (a archivedFavFolderDo) Create(values ...*model.ArchivedFavFolder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a archivedFavFolderDo) CreateInBatches(values []*model.ArchivedFavFolder, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a archivedFavFolderDo) Save(values ...*model.ArchivedFavFolder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a archivedFavFolderDo) First() (*model.ArchivedFavFolder, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedFavFolder), nil
	}
}

func (a archivedFavFolderDo) Take() (*model.ArchivedFavFolder, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedFavFolder), nil
	}
}

func (a archivedFavFolderDo) Last() (*model.ArchivedFavFolder, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedFavFolder), nil
	}
}

func (a archivedFavFolderDo) Find() ([]*model.ArchivedFavFolder, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArchivedFavFolder), err
}

func (a archivedFavFolderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArchivedFavFolder, err error) {
	buf := make([]*model.ArchivedFavFolder, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a archivedFavFolderDo) FindInBatches(result *[]*model.ArchivedFavFolder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a archivedFavFolderDo) Attrs(attrs ...field.AssignExpr) IArchivedFavFolderDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a archivedFavFolderDo) Assign(attrs ...field.AssignExpr) IArchivedFavFolderDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a archivedFavFolderDo) Joins(fields ...field.RelationField) IArchivedFavFolderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a archivedFavFolderDo) Preload(fields ...field.RelationField) IArchivedFavFolderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a archivedFavFolderDo) FirstOrInit() (*model.ArchivedFavFolder, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedFavFolder), nil
	}
}

func (a archivedFavFolderDo) FirstOrCreate() (*model.ArchivedFavFolder, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedFavFolder), nil
	}
}

func (a archivedFavFolderDo) FindByPage(offset int, limit int) (result []*model.ArchivedFavFolder, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a archivedFavFolderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a archivedFavFolderDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a archivedFavFolderDo) Delete(models ...*model.ArchivedFavFolder) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *archivedFavFolderDo) withDO(do gen.Dao) *archivedFavFolderDo {
	a.DO = *do.(*gen.DO)
	return a
}
