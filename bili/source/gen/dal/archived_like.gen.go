// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/alice52/archive/bili/source/gen/model"
)

func newArchivedLike(db *gorm.DB, opts ...gen.DOOption) archivedLike {
	_archivedLike := archivedLike{}

	_archivedLike.archivedLikeDo.UseDB(db, opts...)
	_archivedLike.archivedLikeDo.UseModel(&model.ArchivedLike{})

	tableName := _archivedLike.archivedLikeDo.TableName()
	_archivedLike.ALL = field.NewAsterisk(tableName)
	_archivedLike.Bvid = field.NewString(tableName, "bvid")
	_archivedLike.CreateTime = field.NewTime(tableName, "create_time")
	_archivedLike.UpdateTime = field.NewTime(tableName, "update_time")
	_archivedLike.DeleteTime = field.NewField(tableName, "delete_time")
	_archivedLike.Aid = field.NewInt64(tableName, "aid")
	_archivedLike.Cid = field.NewInt64(tableName, "cid")
	_archivedLike.Cover = field.NewString(tableName, "cover")
	_archivedLike.Duration = field.NewInt64(tableName, "duration")
	_archivedLike.LikeTime = field.NewInt64(tableName, "like_time")
	_archivedLike.SeasonID = field.NewInt64(tableName, "season_id")
	_archivedLike.Intro = field.NewString(tableName, "intro")
	_archivedLike.Title = field.NewString(tableName, "title")
	_archivedLike.Type = field.NewInt64(tableName, "type")
	_archivedLike.Owner = field.NewString(tableName, "owner")
	_archivedLike.Resp = field.NewString(tableName, "resp")
	_archivedLike.CntInfo = field.NewString(tableName, "cnt_info")

	_archivedLike.fillFieldMap()

	return _archivedLike
}

// archivedLike 点赞视频
type archivedLike struct {
	archivedLikeDo

	ALL        field.Asterisk
	Bvid       field.String
	CreateTime field.Time
	UpdateTime field.Time
	DeleteTime field.Field
	Aid        field.Int64  // bili aid
	Cid        field.Int64  // bili cid
	Cover      field.String // video cover
	Duration   field.Int64  // video duration
	LikeTime   field.Int64  // video like time
	SeasonID   field.Int64  // bili season id
	Intro      field.String // video intro
	Title      field.String // video title
	Type       field.Int64  // video type
	Owner      field.String // {"mid": 173986740, "name": "这个月-"}
	Resp       field.String
	CntInfo    field.String // {"collect": 73600, "play": 1068474, "danmaku": 2632, "vt": 0, "play_switch": 0, "reply": 0, "view_text_1": "106.8万" }

	fieldMap map[string]field.Expr
}

func (a archivedLike) Table(newTableName string) *archivedLike {
	a.archivedLikeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a archivedLike) As(alias string) *archivedLike {
	a.archivedLikeDo.DO = *(a.archivedLikeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *archivedLike) updateTableName(table string) *archivedLike {
	a.ALL = field.NewAsterisk(table)
	a.Bvid = field.NewString(table, "bvid")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.DeleteTime = field.NewField(table, "delete_time")
	a.Aid = field.NewInt64(table, "aid")
	a.Cid = field.NewInt64(table, "cid")
	a.Cover = field.NewString(table, "cover")
	a.Duration = field.NewInt64(table, "duration")
	a.LikeTime = field.NewInt64(table, "like_time")
	a.SeasonID = field.NewInt64(table, "season_id")
	a.Intro = field.NewString(table, "intro")
	a.Title = field.NewString(table, "title")
	a.Type = field.NewInt64(table, "type")
	a.Owner = field.NewString(table, "owner")
	a.Resp = field.NewString(table, "resp")
	a.CntInfo = field.NewString(table, "cnt_info")

	a.fillFieldMap()

	return a
}

func (a *archivedLike) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *archivedLike) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 16)
	a.fieldMap["bvid"] = a.Bvid
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["delete_time"] = a.DeleteTime
	a.fieldMap["aid"] = a.Aid
	a.fieldMap["cid"] = a.Cid
	a.fieldMap["cover"] = a.Cover
	a.fieldMap["duration"] = a.Duration
	a.fieldMap["like_time"] = a.LikeTime
	a.fieldMap["season_id"] = a.SeasonID
	a.fieldMap["intro"] = a.Intro
	a.fieldMap["title"] = a.Title
	a.fieldMap["type"] = a.Type
	a.fieldMap["owner"] = a.Owner
	a.fieldMap["resp"] = a.Resp
	a.fieldMap["cnt_info"] = a.CntInfo
}

func (a archivedLike) clone(db *gorm.DB) archivedLike {
	a.archivedLikeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a archivedLike) replaceDB(db *gorm.DB) archivedLike {
	a.archivedLikeDo.ReplaceDB(db)
	return a
}

type archivedLikeDo struct{ gen.DO }

type IArchivedLikeDo interface {
	gen.SubQuery
	Debug() IArchivedLikeDo
	WithContext(ctx context.Context) IArchivedLikeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArchivedLikeDo
	WriteDB() IArchivedLikeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArchivedLikeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArchivedLikeDo
	Not(conds ...gen.Condition) IArchivedLikeDo
	Or(conds ...gen.Condition) IArchivedLikeDo
	Select(conds ...field.Expr) IArchivedLikeDo
	Where(conds ...gen.Condition) IArchivedLikeDo
	Order(conds ...field.Expr) IArchivedLikeDo
	Distinct(cols ...field.Expr) IArchivedLikeDo
	Omit(cols ...field.Expr) IArchivedLikeDo
	Join(table schema.Tabler, on ...field.Expr) IArchivedLikeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArchivedLikeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArchivedLikeDo
	Group(cols ...field.Expr) IArchivedLikeDo
	Having(conds ...gen.Condition) IArchivedLikeDo
	Limit(limit int) IArchivedLikeDo
	Offset(offset int) IArchivedLikeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArchivedLikeDo
	Unscoped() IArchivedLikeDo
	Create(values ...*model.ArchivedLike) error
	CreateInBatches(values []*model.ArchivedLike, batchSize int) error
	Save(values ...*model.ArchivedLike) error
	First() (*model.ArchivedLike, error)
	Take() (*model.ArchivedLike, error)
	Last() (*model.ArchivedLike, error)
	Find() ([]*model.ArchivedLike, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArchivedLike, err error)
	FindInBatches(result *[]*model.ArchivedLike, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ArchivedLike) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArchivedLikeDo
	Assign(attrs ...field.AssignExpr) IArchivedLikeDo
	Joins(fields ...field.RelationField) IArchivedLikeDo
	Preload(fields ...field.RelationField) IArchivedLikeDo
	FirstOrInit() (*model.ArchivedLike, error)
	FirstOrCreate() (*model.ArchivedLike, error)
	FindByPage(offset int, limit int) (result []*model.ArchivedLike, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArchivedLikeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a archivedLikeDo) Debug() IArchivedLikeDo {
	return a.withDO(a.DO.Debug())
}

func (a archivedLikeDo) WithContext(ctx context.Context) IArchivedLikeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a archivedLikeDo) ReadDB() IArchivedLikeDo {
	return a.Clauses(dbresolver.Read)
}

func (a archivedLikeDo) WriteDB() IArchivedLikeDo {
	return a.Clauses(dbresolver.Write)
}

func (a archivedLikeDo) Session(config *gorm.Session) IArchivedLikeDo {
	return a.withDO(a.DO.Session(config))
}

func (a archivedLikeDo) Clauses(conds ...clause.Expression) IArchivedLikeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a archivedLikeDo) Returning(value interface{}, columns ...string) IArchivedLikeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a archivedLikeDo) Not(conds ...gen.Condition) IArchivedLikeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a archivedLikeDo) Or(conds ...gen.Condition) IArchivedLikeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a archivedLikeDo) Select(conds ...field.Expr) IArchivedLikeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a archivedLikeDo) Where(conds ...gen.Condition) IArchivedLikeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a archivedLikeDo) Order(conds ...field.Expr) IArchivedLikeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a archivedLikeDo) Distinct(cols ...field.Expr) IArchivedLikeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a archivedLikeDo) Omit(cols ...field.Expr) IArchivedLikeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a archivedLikeDo) Join(table schema.Tabler, on ...field.Expr) IArchivedLikeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a archivedLikeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArchivedLikeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a archivedLikeDo) RightJoin(table schema.Tabler, on ...field.Expr) IArchivedLikeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a archivedLikeDo) Group(cols ...field.Expr) IArchivedLikeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a archivedLikeDo) Having(conds ...gen.Condition) IArchivedLikeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a archivedLikeDo) Limit(limit int) IArchivedLikeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a archivedLikeDo) Offset(offset int) IArchivedLikeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a archivedLikeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArchivedLikeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a archivedLikeDo) Unscoped() IArchivedLikeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a archivedLikeDo) Create(values ...*model.ArchivedLike) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a archivedLikeDo) CreateInBatches(values []*model.ArchivedLike, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a archivedLikeDo) Save(values ...*model.ArchivedLike) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a archivedLikeDo) First() (*model.ArchivedLike, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedLike), nil
	}
}

func (a archivedLikeDo) Take() (*model.ArchivedLike, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedLike), nil
	}
}

func (a archivedLikeDo) Last() (*model.ArchivedLike, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedLike), nil
	}
}

func (a archivedLikeDo) Find() ([]*model.ArchivedLike, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArchivedLike), err
}

func (a archivedLikeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArchivedLike, err error) {
	buf := make([]*model.ArchivedLike, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a archivedLikeDo) FindInBatches(result *[]*model.ArchivedLike, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a archivedLikeDo) Attrs(attrs ...field.AssignExpr) IArchivedLikeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a archivedLikeDo) Assign(attrs ...field.AssignExpr) IArchivedLikeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a archivedLikeDo) Joins(fields ...field.RelationField) IArchivedLikeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a archivedLikeDo) Preload(fields ...field.RelationField) IArchivedLikeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a archivedLikeDo) FirstOrInit() (*model.ArchivedLike, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedLike), nil
	}
}

func (a archivedLikeDo) FirstOrCreate() (*model.ArchivedLike, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedLike), nil
	}
}

func (a archivedLikeDo) FindByPage(offset int, limit int) (result []*model.ArchivedLike, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a archivedLikeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a archivedLikeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a archivedLikeDo) Delete(models ...*model.ArchivedLike) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *archivedLikeDo) withDO(do gen.Dao) *archivedLikeDo {
	a.DO = *do.(*gen.DO)
	return a
}
